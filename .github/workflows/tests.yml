name: Tests
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-24.04
    name: Build
    steps:
    - uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'
    - uses: actions/checkout@v4
    - name: Build all
      run: |
        make
        ls -al ./out/buildg
        if ldd ./out/buildg ; then echo "buildg must be static binary" ; exit 1 ; fi

  test:
    runs-on: ubuntu-24.04
    name: Test
    strategy:
      fail-fast: false
      matrix:
        mode: ["root", "rootless"]
    steps:
    - uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'
    - uses: actions/checkout@v4
    - name: Rootlesskit setup
      run: |
        cat <<EOT | sudo tee "/etc/apparmor.d/usr.local.bin.rootlesskit"
        # ref: https://ubuntu.com/blog/ubuntu-23-10-restricted-unprivileged-user-namespaces
        abi <abi/4.0>,
        include <tunables/global>
        
        /usr/local/bin/rootlesskit flags=(unconfined) {
          userns,
        
          # Site-specific additions and overrides. See local/README for details.
          include if exists <local/usr.local.bin.rootlesskit>
        }
        EOT
        sudo systemctl restart apparmor.service
    - name: Build and install
      run: |
        GO_VERSION=$(go version | cut -d' ' -f3 | cut -c3-)
        DOCKER_BUILDKIT=1 docker build --build-arg GO_VERSION=$GO_VERSION --output type=tar,dest=${GITHUB_WORKSPACE}/buildg-full.tar --target out-full --platform linux/amd64 .
        sudo tar -C /usr/local/ -xvf ${GITHUB_WORKSPACE}/buildg-full.tar
    - name: Test
      run: |
        if [ "${{ matrix.mode }}" == "root" ] ; then
          sudo go test -timeout 30m -v ./...
        elif [ "${{ matrix.mode }}" == "rootless" ] ; then
          mkdir -p ${GITHUB_WORKSPACE}/tmp
          TEST_BUILDG_TMP_DIR=${GITHUB_WORKSPACE}/tmp go test -timeout 30m -v ./...
        else
          echo "unknown mode ${{ matrix.mode }}"
          exit 1
        fi

  linter:
    runs-on: ubuntu-24.04
    name: Linter
    steps:
    - uses: actions/checkout@v4
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.0
        args: --verbose

  project:
    name: Project Checks
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'
    - uses: actions/checkout@v4
      with:
        fetch-depth: 100
    - name: "Check DCO sign"
      run: |
        go install github.com/vbatts/git-validation@v1.2.0
        git-validation -v -run DCO
